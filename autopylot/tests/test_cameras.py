"""Test the cameras."""
import os
import shutil
import time

import numpy as np
import pytest

from ..cameras import Camera
from ..utils import io, settings

settings = settings.settings


def test_dummy_capture():
    """Test the shape of the image generated by the dummy camera."""
    shape = (120, 160, 3)
    test_memory = {}
    cam = Camera(test_memory, camera_type="dummy", shape=shape)
    cam.update()
    assert test_memory["image"].shape == shape


def test_dummy_color():
    """Test the shape of the image generated by the dummy camera."""
    shape = (120, 160, 1)
    test_memory = {}
    cam = Camera(test_memory, camera_type="dummy", shape=shape)
    cam.update()
    assert test_memory["image"].shape == shape


def test_replay_cam_error():
    shape = (120, 160, 1)
    test_memory = {}

    with pytest.raises(ValueError):
        Camera(
            test_memory,
            camera_type="replay",
            shape=shape,
            dataset_path="this/is/a/fake/path",
        )


def test_replay_cam():
    """Generate a dummy dataset for replay and test the replay camera."""
    dataset_path = os.path.join(settings.DATASET_PATH, "test_replay_camera")
    if not os.path.exists(dataset_path):
        os.mkdir(dataset_path)

    shape = (120, 160, 3)

    test_memory = {}
    test_memory["steering"] = 0.0
    test_memory["throttle"] = 0.5
    cam = Camera(test_memory, camera_type="dummy", shape=shape)

    for _ in range(100):
        cam.update()
        assert io.save_image_data(
            test_memory,
            os.path.join(
                dataset_path,
                settings.JSON_FILE_FORMAT.format(t=time.time()),
            ),
        ) == (True, True)

    test_memory = {}
    cam = Camera(
        test_memory,
        camera_type="replay",
        shape=shape,
        dataset_path=dataset_path,
    )

    prev_image = np.zeros(shape)
    for _ in range(100):
        assert (test_memory.get("image") != prev_image).any()

    # assert that the replay loops
    assert (test_memory.get("image") != prev_image).any()

    shutil.rmtree(dataset_path)
